From 5026741d2f1658fe71d327b87790bbcd68c15475 Mon Sep 17 00:00:00 2001
From: Will Weston <Williamweston81@gmail.com>
Date: Tue, 12 Dec 2023 11:34:59 -0600
Subject: [PATCH] Weston(3) Update: dependcies Update: App.tsx for graph
 rendering Update: Graph.tsx for element attributes

---
 .idea/misc.xml |  3 +++
 src/App.tsx    | 32 +++++++++++++++++++++++++-------
 src/Graph.tsx  | 13 +++++++++++--
 3 files changed, 39 insertions(+), 9 deletions(-)

diff --git a/.idea/misc.xml b/.idea/misc.xml
index d56657a..812ab5a 100644
--- a/.idea/misc.xml
+++ b/.idea/misc.xml
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.9" />
+  </component>
   <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..189b4a7 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,14 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import {setInterval} from "timers";
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +24,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,20 +32,33 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+        return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
+
   /**
    * Render the App react component
    */
@@ -59,7 +75,9 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => {
+              this.getDataFromServer()
+              }}>
             Start Streaming Data
           </button>
           <div className="Graph">
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..09d0225 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots', '["stock"]')
+      elem.setAttribute('row-pivots', '["timestamp"]')
+      elem.setAttribute('columns', '["top_ask_price"]')
+      elem.setAttribute('aggregates',
+          '{"stock": "distinct_count"' +
+          '"top_ask_price":"avg",' +
+          '"top_bid_price":"avg",' +
+          '"timestamp":"distinct count"}');
     }
   }
 
-- 
2.41.0

